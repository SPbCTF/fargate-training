from flask import jsonify, render_template, request, abort, render_template_string
from cryptostorm import app, database, crypto
import hashlib

methods = ["SHA-1", "SHA-2", "Keccak", "PRNG", "RSA", "AES"]#, "Shamir"]

@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html',
                           methods=enumerate(methods))


@app.route('/flags')
def show():

    sql = 'SELECT id, name, method, public FROM flags ORDER BY id DESC LIMIT 500'
    flags_db = database.query(sql)

    flags = [dict(flags_db[i]) for i in range(len(flags_db))]

    for i in range(len(flags)):
        flags[i]["method"] = methods[flags[i]["method"]]

    return render_template('show.html', flags = flags)

@app.route('/unlock/<int:id>', methods=["POST"])
def unlock(id):

    sql = f'SELECT method, public, flag FROM flags WHERE id = {id}'
    flags_db = database.query(sql)

    if len(flags_db) != 1:
        abort(400)

    data = flags_db[0]

    method = data['method']
    public = str(data['public'])
    private = request.form["private"]
    flag = data['flag']

    method = str(method)

    if method == '0':
        res = crypto.sha1_check(private, public)

    elif method == '1':
        res = crypto.sha2_check(private, public)

    elif method == '2':
        res = crypto.sha3_check(private, public)

    elif method == '3':
        res = crypto.PRNG_check(private, public)

    elif method == '4':
        global N; N=0
        global e; e=0
        global c; c=[]
        exec (public,globals())
        c = list(map(int, c))
        private = int(private)
        res = crypto.RSA_decrypt(private, N, c, flag)

    elif method == '5':
        res = crypto.AES_decrypt(public, private, flag)

    else:
        res = False

    if not res:
        abort(403)

    template = """{{% extends "base.html" %}}{{% block content %}}<section class="py-5 " style="background-color: #e9ecef;"><div class="container text-center"><h1 class="jumbotron-heading">Успешно!</h1><p class="lead text-muted">Вот Ваш флаг:</a></p><h4 class="lead text-muted">{}</h4></div></section>{{% endblock %}}""".format(flag)

    return render_template_string(template)

@app.route('/add', methods=['POST'])
def add():
    db = database.get()
    method = request.form["method"]
    flag = request.form["flag"]
    name = request.form["name"]

    try:
        id = int(database.query("SELECT max(id) from flags")[0]['max(id)'])+1
    except:
        id = 1

    if not method or not flag or not name or not int(method) in range(len(methods)) or len(flag) < 32:
        abort(400)

    flag = flag.rstrip().lstrip()

    if method == '0':
        private, public = crypto.sha1_encrypt(flag)

    elif method == '1':
        private, public = crypto.sha2_encrypt(id)

    elif method == '2':
        private, public = crypto.sha3_encrypt(flag)

    elif method == '3':
        private, public = crypto.PRNG_encrypt(id)

    elif method == '4':
        n, e, d, c = crypto.RSA_encrypt(flag)
        n = str(n)
        e = str(e)
        c = list(map(str, c))
        public = f"N={n}; e={e}; c={[*c]}"
        private = str(d)

    elif method == '5':
        public, private = crypto.AES_encrypt(flag)

    db.execute("INSERT OR IGNORE INTO flags (name, flag, method, public, private) "
                   "VALUES (?, ?, ?, ?, ?)", [name, flag, method, public, private])
    db.commit()

    template = """{{% extends "base.html" %}}{{% block content %}}<section class="py-5 " style="background-color: #e9ecef;"><div class="container text-center"><h1 class="jumbotron-heading">Поздравляем! Флаг успешно защищен</h1> <p class="lead text-muted">Используйте приватный ключ, чтобы получить флаг из нашего <a href="/flags">хранилища:</a></p><h4 class="lead text-muted">{{% raw %}}{}{{% endraw %}}</h4><p class="lead text-muted">Ваш уникальный идентификатор флага: {}</p></div></section>{{% endblock %}}""".format(private, id)

    return render_template_string(template)



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































@app.route('/s3cr3t',methods=["G1MM3FL4G5?"])
def s3cr3t():

    key = request.args["top"]
    if hashlib.md5(key.encode()).hexdigest() not in ["5c8ba9f9ab82910d8b4c27de996c904f","b0e4a7cea79b51a6adcd283195e5df12"]:
        abort(403)

    # Well, it's < 8 char, lowercase

    sql = 'SELECT flag FROM flags ORDER BY id DESC LIMIT 5'
    flags_db = database.query(sql)

    flags = []
    for i in flags_db:
        flags.append(i['flag'][::-1])

    return '\n'.join(flags)